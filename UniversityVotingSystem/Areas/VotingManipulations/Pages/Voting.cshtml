@page "{Id}"
@model UniversityVotingSystem.webpages.VotingModel
@using Microsoft.AspNetCore.Identity
@using UniversityVotingSystem.Models
@{
}
Hi
<p>@Model.VotingViewModelObj.getVoting().VotingName</p>
@{
    var array = @Model.VotingViewModelObj.GetHashTableReference().GetNodes();
    foreach(var node in array)
    {
        if(node.getValue() is not null && node.getValue().PropositionObj is not null){
            <div class="vote" style="display: inline-block;">
                <p id="vote-info-@node.getValue().PropositionObj.PropositionId">Proposition: id: name: @node.getValue().PropositionObj.PropositionText votes</p>
                <p id="@node.getValue().PropositionObj.PropositionId">@node.GetValueCount()</p>
                <button onclick="vote('@Model.UserId', '@node.getValue().PropositionObj.PropositionId', '@Model.VotingViewModelObj.getVoting().VotingId')">Vote</button>
            </div>
        }
    }
}
<script src="~/js/signalr.js"></script>
<script>
    var connection = new signalR.HubConnectionBuilder().withUrl("/vote").build();
    connection.start();
    function vote(userId, propositionId, votingId){
        connection.invoke("Vote", userId, propositionId, votingId).catch(function(err){
            return console.error(err.toString());
        });

        event.preventDefault();
    }

    connection.on("UpdatedVote", function(isGood, propositionId, lastId){
        console.log(propositionId);
        console.log(lastId);
        var proposition = document.getElementById(propositionId);
        var lastProposition = document.getElementById(lastId);
        var updatedCount = Number(proposition.innerText);
        var lastUpdatedCount = Number(lastProposition.innerText) - 1;
        updatedCount+=1;
        proposition.innerText = updatedCount;
        lastProposition.innerText = lastUpdatedCount;
    });
</script>